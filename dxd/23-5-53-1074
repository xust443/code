#力扣1074题
给出矩阵 matrix 和目标值 target，返回元素总和等于目标值的非空子矩阵的数量。

子矩阵 x1, y1, x2, y2 是满足 x1 <= x <= x2 且 y1 <= y <= y2 的所有单元 matrix[x][y] 的集合。

如果 (x1, y1, x2, y2) 和 (x1', y1', x2', y2') 两个子矩阵中部分坐标不同（如：x1 != x1'），那么这两个子矩阵也不同。
https://leetcode.cn/problems/number-of-submatrices-that-sum-to-target/
class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int res=0,m=matrix.size(),n=matrix[0].size();//res是结果，m是行数，n是列数
        vector<vector<int>> presum(m,vector<int>(n+1,0));//创建矩阵存放每行的累加和，m行n+1列
        for(int i=0;i<m;i++)
        {
            for(int j=1;j<n+1;j++)
            {
                presum[i][j]=presum[i][j-1]+matrix[i][j-1];//计算出每行的前j列之和
            }
        }
        unordered_map<int,int> counter;//定义无序的哈希表容器
        for(int col1=0;col1<n+1;col1++)
        {
            for(int col2=col1+1;col2<n+1;col2++)
            {
                counter={{0,1}};//key是0时，对应的value是1
                int cur=0;//保存当前矩阵的和
                for(int row=0;row<m;row++)
                {
                    cur+=presum[row][col2]-presum[row][col1];
                    res+=counter.find(cur-target)!=counter.end()?counter[cur-target]:0;//不等于结束迭代器说明找到了
                    counter[cur]++;
                }
            }
        }
        return res;
    }
};
